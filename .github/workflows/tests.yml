# -*- coding: utf-8 -*-
#
# Copyright (C) 2020-2022 CERN.
#
# Invenio App RDM is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

name: CI

on:
  push:
    branches: main
  pull_request:
    branches: main
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 4 * * 6"
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason"
        required: false
        default: "Manual trigger"

jobs:
  Tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.12]
        db-service: [postgresql14]
        search-service: [opensearch2]
        cache-service: [redis]
        mq-service: [rabbitmq]
        node-version: [18]
        include:
          - db-service: postgresql14
            DB_EXTRAS: "postgresql"

    env:
      DB: ${{ matrix.db-service }}
      SEARCH: ${{ matrix.search-service }}
      EXTRAS: tests

    steps:
      - name: Install FFmpeg
        run: |
          sudo apt update
          sudo apt-get install ffmpeg

      - name: Install ldap dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsasl2-dev python-dev libldap2-dev libssl-dev

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: setup.cfg

      - name: Generate dependencies
        run: |
          python -m pip install --upgrade pip py setuptools wheel requirements-builder
          requirements-builder -e $EXTRAS --level=pypi setup.py > .pypi-${{ matrix.python-version }}-requirements.txt

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.pypi-${{ matrix.python-version }}-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install -r .pypi-${{ matrix.python-version }}-requirements.txt
          pip install .[$EXTRAS]
          pip freeze
          docker --version
          docker-compose --version

      - name: Run tests
        run: |
          ./run-tests.sh tests/unit
