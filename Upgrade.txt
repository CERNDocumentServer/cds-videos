# Notes

- index: not_analyzed
- type: completion for suggestions
-[x] ffmpeg: gif method was moved in module
- admin panel shows Banners
- test statistics, should we install raven?
- missing os-v2 invenio_opendefinition.mappings
- existing kw need updating, remove payload as it is not supported
- project deletion from the UI fails to index the project as it tries to index it by id which results to a PIDDeletedError
- cds-js module to be archived
- integrate invenio-stats and adapt code accordingly
- check https://cern.service-now.com/service-portal?id=outage&n=OTG0150438
  - check krb ticket by running 'klist -e -c /var/run/krb5-tokens/token.krb5'

# DB update

- if local users then we need to re-encrypt the passwords
  - NOT needed if set SECURITY_PASSWORD_SINGLE_HASH = True
- invenio alembic upgrade
- Remove keywords.suggest_name.payload
```
from sqlalchemy.orm.exc import NoResultFound

from cds.modules.records.api import Keyword
from invenio_pidstore.models import PersistentIdentifier, PIDStatus
from invenio_db import db


def get_all_pids_by(pid_type):
    """Get all PIDs for the given type.

    :param pid_type: String representing the PID type value, for example 'recid'.
    """
    pids = PersistentIdentifier.query.filter(PersistentIdentifier.pid_type == pid_type).filter(
        PersistentIdentifier.status == PIDStatus.REGISTERED).yield_per(100)
    return pids


def get_record_by_pid(pid):
    """Fetch and return the published record given its PID.

    :param pid: String representing the PID value.
    """
    try:
        return Keyword.get_record(pid.object_uuid)
    except NoResultFound:
        return None


kwds = get_all_pids_by("kwid")

for pid in kwds:
    rec = get_record_by_pid(pid)
    if rec is not None:
        rec["suggest_name"].pop("payload", None)
        rec.commit()
db.session.commit()
```

# Search reindex

```bash

cds index reindex -t recid
cds index reindex -t depid
cds index reindex -t catid
cds index reindex -t kwid
cds index reindex -t od_lic
cds index run

```

## Local setup

- Node v18
- Python 3.9

```bash

# setup
./scripts/bootstrap_upgrade
./scripts/setup-instance.sh

# web server
./scripts/server

# celery
./scripts/celery

# assets watch
./scripts/assets-watch

```

## REST API upload

### Upload a remote file

```invenio shell

import requests

# Create a personal access token in /account/settings/applications/tokens/new
# ticking all scopes
# AUTH_TOKEN = "4s9XMJcFsGiKH9GSwU004kHb68W7tlyLnsweZ970TBsceQCALwWLwRxR4ujf"
# SERVER_HOST = "https://127.0.0.1:5000"
AUTH_TOKEN = "hxTfLuJGLQpbpXnw7zn5mL2YqiE8GrRSrp2E9AgOQ21P3Dam0ScxsrbVUg9x"
SERVER_HOST = "https://127.0.0.1:5000"
video_url = "https://cernbox.cern.ch/remote.php/dav/public-files/tt6kuZcrloXWhVs/20170205%20-%20FOSDEM%202017%20-%20Magnum%20at%20CERN.mp4"

def upload_video(file_path, auth_token):
    headers = {"Authorization": f"Bearer {auth_token}"}
    headers["content-type"] = "application/vnd.project.partial+json"
    body = {
        "$schema": f"{SERVER_HOST}/schemas/deposits/records/videos/project/project-v1.0.0.json",
    }
    res_project = requests.post(
        f"{SERVER_HOST}/api/deposits/project/",
        json=body,
        headers=headers,
        verify=False if "127.0.0.1" in SERVER_HOST else True,
    )

    res_project = requests.put(
        f"{SERVER_HOST}/api/deposits/project/{res_project.json()['id']}",
        json={
            "_access": {"update": ["Tim.Bell@cern.ch"]},
            "category": "CERN",
            "type": "VIDEO"
        },
        headers=headers,
        verify=False if "127.0.0.1" in SERVER_HOST else True,
    )

    # Video
    headers["content-type"] = "application/vnd.video.partial+json"
    body = {
        "$schema": f"{SERVER_HOST}/schemas/deposits/records/videos/video/video-v1.0.0.json",
    }
    body["_project_id"] = res_project.json()["id"]

    res_video = requests.post(
        f"{SERVER_HOST}/api/deposits/video/",
        json=body,
        headers=headers,
        verify=False if "127.0.0.1" in SERVER_HOST else True,
    )

    res_video = requests.put(
        f"{SERVER_HOST}/api/deposits/video/{res_video.json()['id']}",
        json={
            "_access": {"update": ["Tim.Bell@cern.ch"]},
            "title": {"title": file_path.split("/")[-1].split(".")[0]},
            "contributors": [
                {
                    "email": "gabrielle.de.bonnerive@cern.ch",
                    "ids": [{"source": "cern", "value": "832317"}],
                    "name": "Pepin Fontaine De Bonnerive, Gabrielle",
                    "role": "Editor",
                },
                {
                    "affiliations": ["CERN"],
                    "email": "Paola.Catapano@cern.ch",
                    "ids": [
                        {"source": "cern", "value": "380837"},
                        {"source": "cds", "value": "2050975"},
                    ],
                    "name": "Catapano, Paola",
                    "role": "Screenwriter",
                },
            ],
            "copyright": {
                "holder": "CERN",
                "url": "http://copyright.web.cern.ch",
                "year": "2024",
            },
            "date": "2024-05-17",
            "description": "Visual curriculum vitae of Fabiola Gianotti at CERN, from her participation in the UA2 experiment to the election for her second mandate as CERN Director General.",
            "doi": "10.17181/videos.2300133",
            "duration": "00:01:49",
            "featured": False,
            "keywords": [
                {"name": "Fabiola"},
                {"name": "Gianotti"},
                {"name": "Director"},
                {"name": "General"},
                {"name": "biography"},
                {"name": "slideshow"},
            ],
            "language": "en",
            "license": [{"license": "CERN", "url": "http://copyright.web.cern.ch"}],
            "publication_date": "2024-05-22",
            "title": {"title": "Fabiola Gianotti Short Visual CV 2024"},
            "type": "VIDEO",
            "vr": False,
        },
        headers=headers,
        verify=False if "127.0.0.1" in SERVER_HOST else True,
    )
    # File upload
    headers["content-type"] = "application/json"
    body = {
        "uri": file_path,
        "key": file_path.split("/")[-1],
        "bucket_id": res_video.json()["metadata"]["_buckets"]["deposit"],
        "deposit_id": res_video.json()["metadata"]["_deposit"]["id"],
    }
    res_flow = requests.post(
        f"{SERVER_HOST}/api/flows/",
        json=body,
        headers=headers,
        verify=False if "127.0.0.1" in SERVER_HOST else True,
    ).json()
    flow_id = res_flow["tags"]["flow_id"]

    video_link = res_project.json()["links"]["html"]
    print(f"Uploaded video: {file_path}. Link: {video_link}")
    return video_link, flow_id

upload_video(video_url, AUTH_TOKEN)
```