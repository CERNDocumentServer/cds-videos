#
# This file is part of Invenio.
# Copyright (C) 2020 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Create flow table."""

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op

# revision identifiers, used by Alembic.
revision = "95f86cc7f284"
down_revision = "27de8e449b4a"
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "flows_flow",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "payload",
            sqlalchemy_utils.JSONType().with_variant(
                sa.dialects.postgresql.JSON(none_as_null=True),
                "postgresql",
            ),
            nullable=True,
        ),
        sa.Column(
            "previous_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["previous_id"],
            ["flows_flow.id"],
            name=op.f("fk_flows_flow_previous_id_flows_flow"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_flows_flow")),
    )
    op.create_table(
        "flows_task",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            nullable=False,
        ),
        sa.Column(
            "flow_id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "payload",
            sqlalchemy_utils.JSONType().with_variant(
                sa.dialects.postgresql.JSON(none_as_null=True),
                "postgresql",
            ),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "CANCELED", "FAILURE", "PENDING", "SUCCESS", name="status"
            ),
            nullable=False,
        ),
        sa.Column("message", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["flow_id"],
            [u"flows_flow.id"],
            name=op.f("fk_flows_task_flow_id_flows_flow"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_flows_task")),
    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("flows_task")
    op.drop_table("flows_flow")
    # ### end Alembic commands ###
